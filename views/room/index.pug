extends ../template.pug

block title
  title Socket.IO chat | #{room['name']}

block append styles
  include ./index.css

block content
  h1#user Welcome #{user['username']}
  h2#room Room: #{room['name']}
  ul#messages
  ul#userActions
  form#form
    input(id="input" name='message' autocomplete="off")
    button Send

  script
    include ../../node_modules/socket.io/client-dist/socket.io.js
  script(type='text/javascript').
    const userID = "#{user['id']}";
    const roomID = "#{room['id']}"

    // Connect to socket, passing in userID and roomID as data
    var socket = io('/chat',{
      query: {
        userID,
        roomID
      }
    });

    var form = document.getElementById('form');
    var inputField = form['message'];
    var messages = document.getElementById('messages');
    var userActions = document.getElementById('userActions');

    let isTyping = false;
    inputField.addEventListener('keydown',(e) => {
      const IS_BACKSPACE = e.keyCode === 8 || e.code === 'Backspace';

      if ( e.target.value.length === 0 && !isTyping && !IS_BACKSPACE) {
        isTyping = !isTyping;
        socket.emit('isTyping')
      }
      else if ( IS_BACKSPACE && e.target.value.length === 1 && isTyping ) {
        isTyping = false;
        socket.emit('isNotTyping');
      }
    });
    form.onsubmit = function(e) {
      e.preventDefault();

      let message = form['message'].value;
      let messageLI = document.createElement('li');
      messageLI.setAttribute('id','me');

      messageLI.textContent = `Me: ${message}`;
      messages.appendChild(messageLI);
      socket.send({ message });

      form.reset();
    }

    function displayMessage(msg) {
      let messageLI = document.createElement('li');
      messageLI.textContent = msg;
      messages.appendChild(messageLI);
    }
    socket.on('userConnected', (data) => {
      let { username } = data;

      displayMessage(`${username} connected.`);
    })
    socket.on('userTyping',(data) => {
      let { id, username } = data;
      let typingLI = document.createElement('li');
      typingLI.setAttribute('id',id);
      typingLI.innerHTML = `${username} <div class='typing-bubbles'><span></span><span></span><span></span></div>`;
      userActions.appendChild(typingLI);
    });
    socket.on('userNotTyping',(data) => {
      let { id } = data;
      userActions.children[id].remove();
    });
    socket.on('newMessage', (data) => {
      let { message } = data;

      displayMessage(message);
    });
    socket.on('userDisconnected',(data) => {
      let { username } = data;

      displayMessage(`${username} disconnected`);
    });
    socket.on('disconnect',() => {
      window.location.assign('/rooms');
    });